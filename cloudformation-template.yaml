AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for 3-layer microservices architecture with ECS scaling, CloudWatch monitoring, and SNS notifications

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnetCidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet
  PrivateSubnetCidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the private subnet
  ClusterName: 
    Type: String
    Default: MyCluster
    Description: Name of the ECS Cluster
  ServiceName:
    Type: String
    Default: MyService
    Description: Name of the ECS Service
  TaskDefinitionFamily:
    Type: String
    Default: MyTaskDefinition
    Description: Task definition family name
  ContainerImage:
    Type: String
    Default: amazonlinux
    Description: Docker image URL for the container
  ContainerPort:
    Type: Number
    Default: 5000
    Description: Port on which the container listens
  EmailAddress:
    Type: String
    Default: bepoadewale@example.com
    Description: Email address to receive SNS notifications
  GuardDutyNotificationEmail:
    Type: String
    Default: guardduty@example.com
    Description: Email address to receive GuardDuty threat notifications

# Foundation Layer: VPC, Subnets, Internet Gateway, NAT Gateway, and Route Tables
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidr
      Tags:
        - Key: Name
          Value: PrivateSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNatGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable


#Security Layer: Access, Monitoring, Notifications 
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Allow traffic to the application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RunningTasksAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: HighRunningTasks
      AlarmDescription: Trigger an alarm when the number of running tasks reaches 8
      MetricName: RunningTaskCount
      Namespace: AWS/ECS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 8
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName
        - Name: ServiceName
          Value: !Ref ServiceName
      AlarmActions:
        - !Ref SNSTopic

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ECSNotifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref EmailAddress

  GuardDutySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: GuardDutyNotifications
      Subscription:
        - Protocol: email
          Endpoint: !Ref GuardDutyNotificationEmail
 
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true
      DataSources:
        S3Logs:
          Enable: true

  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: GuardDutyFindingRule
      Description: Sends GuardDuty findings to the GuardDuty SNS topic.
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      Targets:
        - Arn: !Ref GuardDutySNSTopic
          Id: GuardDutyNotificationTarget

  GuardDutySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref GuardDutySNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sns:Publish"
            Resource: !Ref GuardDutySNSTopic
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt GuardDutyEventRule.Arn

# Application Layer
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskDefinitionFamily
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: MyAppContainer
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: [TaskDefinition, AppSecurityGroup]
    Properties:
      ServiceName: MyService
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet
          SecurityGroups:
            - !Ref AppSecurityGroup
          AssignPublicIp: ENABLED
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
  
  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AutoScalingECSServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource: "*"

  ECSScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${ClusterName}/${ServiceName}"
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ECSScalingTarget
    Properties:
      PolicyName: ScaleUpPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 30

  ECSScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ECSScalingTarget
    Properties:
      PolicyName: ScaleDownPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 30

#Outputs of the Resources
Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: The ID of the VPC

  PublicSubnetId:
    Value: !Ref PublicSubnet
    Description: The ID of the public subnet

  PrivateSubnetId:
    Value: !Ref PrivateSubnet
    Description: The ID of the private subnet

  AppSecurityGroupId:
    Value: !Ref AppSecurityGroup
    Description: The ID of the application security group

  NatGatewayId:
    Value: !Ref NatGateway
    Description: The ID of the NAT Gateway

  NatGatewayElasticIp:
    Value: !Ref NatGatewayEIP
    Description: The Elastic IP address associated with the NAT Gateway

  ECSClusterName:
    Value: !Ref ECSCluster
    Description: The name of the ECS cluster

  ECSServiceName:
    Value: !Ref ECSService
    Description: The name of the ECS service

  TaskDefinitionArn:
    Value: !Ref TaskDefinition
    Description: The ARN of the ECS task definition

  RunningTasksAlarmName:
    Value: !Ref RunningTasksAlarm
    Description: The name of the CloudWatch alarm monitoring ECS tasks

  GuardDutyDetectorId:
    Value: !Ref GuardDutyDetector
    Description: The ID of the GuardDuty detector

  GuardDutyEventRuleArn:
    Value: !GetAtt GuardDutyEventRule.Arn
    Description: The ARN of the EventBridge rule for GuardDuty findings

  SNSTopicArn:
    Value: !Ref SNSTopic
    Description: The ARN of the SNS topic for ECS notifications

  GuardDutySNSTopicArn:
    Value: !Ref GuardDutySNSTopic
    Description: The ARN of the SNS topic for GuardDuty notifications